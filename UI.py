import streamlit as st
import pandas as pd
import requests
import folium
from geopy.geocoders import Nominatim
from streamlit_folium import folium_static
from datetime import datetime
import json

st.set_page_config(page_title="Smart Traffic Planner", layout="wide")
st.title("🚦 Smart Traffic Route Planner")

# Inputs
region = st.selectbox("Region", ["Delhi", "Mumbai", "Bangalore"])
day = st.selectbox("Day", ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])
hour = st.slider("Hour of Day", 0, 23, 9)
origin = st.text_input("Current Location", "Connaught Place, Delhi")
destination = st.text_input("Destination", "Indira Gandhi Airport, Delhi")

# Get congestion from API or fallback
def get_congestion_prediction(day, hour):
    try:
        res = requests.post("http://localhost:8000/predict", json={"day": day, "hour": hour})
        return res.json()["congestion"]
    except requests.exceptions.ConnectionError:
        st.warning("⚠ Could not connect to prediction API. Using fallback prediction.")
        if 7 <= hour <= 9 or 17 <= hour <= 19:
            return 45.0
        elif 10 <= hour <= 16:
            return 25.0
        else:
            return 10.0

# Get route using OSRM

def get_road_route(start_lon, start_lat, end_lon, end_lat):
    url = f"http://router.project-osrm.org/route/v1/driving/{start_lon},{start_lat};{end_lon},{end_lat}?overview=full&geometries=geojson"
    response = requests.get(url)
    if response.status_code == 200:
        coords = response.json()["routes"][0]["geometry"]["coordinates"]
        return [[lat, lon] for lon, lat in coords]
    return None

if st.button("Get Best Route"):
    st.subheader("📍 Mapping Route and Congestion Prediction")

    geolocator = Nominatim(user_agent="planner")
    loc1 = geolocator.geocode(origin)
    loc2 = geolocator.geocode(destination)

    if loc1 and loc2:
        m = folium.Map(location=[loc1.latitude, loc1.longitude], zoom_start=12)

        folium.Marker([loc1.latitude, loc1.longitude], tooltip="Start", icon=folium.Icon(color="green")).add_to(m)
        folium.Marker([loc2.latitude, loc2.longitude], tooltip="End", icon=folium.Icon(color="red")).add_to(m)

        route = get_road_route(loc1.longitude, loc1.latitude, loc2.longitude, loc2.latitude)

        if route:
            folium.PolyLine(route, color="blue", weight=5).add_to(m)
        else:
            st.error("Could not fetch road route. Showing straight line.")
            folium.PolyLine([[loc1.latitude, loc1.longitude], [loc2.latitude, loc2.longitude]], color="gray").add_to(m)

        folium_static(m)

        congestion = get_congestion_prediction(day, hour)
        distance_km = ((loc1.latitude - loc2.latitude)*2 + (loc1.longitude - loc2.longitude)*2)*0.5 * 111
        base_time_min = distance_km / 40 * 60
        est_time = base_time_min * (1 + congestion / 100)

        st.markdown(f"Estimated Congestion: {congestion:.1f}%")
        st.markdown(f"Estimated Travel Time: {est_time:.1f} min")
    else:
        st.error("Invalid location entered.")

st.markdown("---")
st.subheader("📊 EDA on Real-Time API Traffic Data")

if st.checkbox("Show Traffic Trends"):
    try:
        df = pd.read_csv("api_traffic_data.csv")
        st.line_chart(df.groupby("Hour")["Congestion"].mean())
        st.bar_chart(df.groupby("Day")["Congestion"].mean())
    except FileNotFoundError:
        st.error("🚫 No traffic data file found. Please ensure 'api_traffic_data.csv' exists or is generated by the R API.")
